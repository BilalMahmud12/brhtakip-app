type ExtraProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  isActive: String
  name: String
  image: String
}

enum Roles {
  ADMIN
  CLIENT_ROOT
  CLIENT_USER
}

type ApplicationArea @model @auth(rules: [{allow: public}]) {
  id: ID!
  isActive: Boolean!
  name: String
}

type RequestItem {
  applicationArea: AWSJSON
  material: AWSJSON
  branded: Boolean
  quantity: Int
  width: Float
  height: Float
  designNote: String
}

enum RequestStatus {
  PENDING_CLIENT_APPROVAL
  PENDING_APPROVAL
  IN_DESIGN
  IN_PRESS
  IN_APPLICATION
  COMPLETED
  CANCELLED
}

type Material @model @auth(rules: [{allow: public}]) {
  id: ID!
  isActive: Boolean!
  name: String!
}

type UserProfile @model @auth(rules: [{allow: public}]) {
  id: ID!
  cognitoID: ID
  clientprofileID: ID @index(name: "byClientProfile")
  isActive: Boolean
  firstName: String
  lastName: String
  email: AWSEmail
  role: Roles
  permissions: [String]
}

type Area @model @auth(rules: [{allow: public}]) {
  id: ID!
  districtID: ID! @index(name: "byDistrict")
  isActive: Boolean!
  Stores: [Store] @hasMany(indexName: "byArea", fields: ["id"])
  name: String
  createdBy: String
  updatedBy: String
}

type District @model @auth(rules: [{allow: public}]) {
  id: ID!
  cityID: ID! @index(name: "byCity")
  isActive: Boolean!
  Areas: [Area] @hasMany(indexName: "byDistrict", fields: ["id"])
  Stores: [Store] @hasMany(indexName: "byDistrict", fields: ["id"])
  name: String
  createdBy: String
  updatedBy: String
}

type City @model @auth(rules: [{allow: public}]) {
  id: ID!
  isActive: Boolean!
  Districts: [District] @hasMany(indexName: "byCity", fields: ["id"])
  Stores: [Store] @hasMany(indexName: "byCity", fields: ["id"])
  name: String
  createdBy: String
  updatedBy: String
}

type ClientProfile @model @auth(rules: [{allow: public}]) {
  id: ID!
  isActive: Boolean
  UserProfiles: [UserProfile] @hasMany(indexName: "byClientProfile", fields: ["id"])
  Brands: [Brand] @hasMany(indexName: "byClientProfile", fields: ["id"])
  Requests: [Request] @hasMany(indexName: "byClientProfile", fields: ["id"])
  name: String
  rootUserId: ID
  contactEmail: AWSEmail
  contactPhone: String
  address: String
}

type Store @model @auth(rules: [{allow: public}]) {
  id: ID!
  cityID: ID! @index(name: "byCity")
  districtID: ID! @index(name: "byDistrict")
  areaID: ID! @index(name: "byArea")
  name: String!
  address: String
  Requests: [Request] @hasMany(indexName: "byStore", fields: ["id"])
  phones: AWSJSON
  email: [AWSJSON]
  notes: AWSJSON
  created_by: String
  updated_by: String
  Area: Area @belongsTo(fields: ["areaID"])
  District: District @belongsTo(fields: ["districtID"])
  City: City @belongsTo(fields: ["cityID"])
}

type Product @model @auth(rules: [{allow: public}]) {
  id: ID!
  brandID: ID! @index(name: "byBrand")
  isActive: Boolean
  name: String
}

type Brand @model @auth(rules: [{allow: public}]) {
  id: ID!
  Products: [Product] @hasMany(indexName: "byBrand", fields: ["id"])
  clientprofileID: ID! @index(name: "byClientProfile")
  isActive: Boolean
  name: String
}

type Request @model @auth(rules: [{allow: public}]) {
  id: ID!
  clientprofileID: ID! @index(name: "byClientProfile")
  storeID: ID! @index(name: "byStore")
  requestNumber: String!
  Brand: Brand @hasOne
  Product: Product @hasOne
  status: RequestStatus!
  Material: Material @hasOne
  requestDetails: RequestItem
  Store: Store @belongsTo(fields: ["storeID"])
  ClientProfile: ClientProfile @belongsTo(fields: ["clientprofileID"])
}
 